# Task Management Database Rebuild - File Documentation

## Overview

This document explains what each SQL file does in the database rebuild process. The files must be run in **exact numerical order** as each file depends on the previous ones.

---

## File Details

### 01_drop_and_create_database.sql
**Purpose**: Clean slate database creation
- Terminates all existing connections to `task_management` database
- Drops the existing database completely
- Creates a fresh `task_management` database with proper encoding
- Sets up initial ownership and permissions
- **Run as**: SYSTEM user on postgres database
- **Dependencies**: None (first file)

### 02_extensions.sql
**Purpose**: Install required PostgreSQL extensions
- `uuid-ossp`: For generating unique IDs
- `pgcrypto`: For password hashing and encryption
- `fuzzystrmatch`: For fuzzy string matching in searches
- `pg_trgm`: For advanced text search capabilities
- **Run as**: SYSTEM user on task_management database
- **Dependencies**: 01_drop_and_create_database.sql

### 03_schemas.sql
**Purpose**: Create logical database schemas
- `core`: Core business entities (customers, employees, equipment)
- `interactions`: Customer interactions and components (Layer 1 & 2)
- `tasks`: Task management (Layer 3 - user and driver tasks)
- `security`: Security, authentication, and user management
- `system`: System utilities, configuration, and reference data
- Sets up schema permissions and search paths
- **Dependencies**: 02_extensions.sql

### 04_core_tables.sql
**Purpose**: Create core business entity tables
- `employees`: Employee master data (also serves as system users)
- `customers`: Customer master data (companies and individuals)
- `contacts`: Customer contact persons
- `sites`: Customer delivery and billing sites
- `equipment_categories`: Equipment types for rental (generic, not specific units)
- `equipment_pricing`: Pricing by customer type (company vs individual)
- Creates generic customer/contact (ID 999) for application processes
- **Dependencies**: 03_schemas.sql

### 05_security_tables.sql
**Purpose**: Create security and user management system
- `employee_auth`: Employee authentication data with encrypted passwords
- `role_permissions`: Role-based permissions matrix
- `audit_log`: Complete audit trail for all system changes
- `login_attempts`: Security monitoring for login attempts
- `password_policy`: Configurable password policy settings
- Includes security functions for password hashing, verification, and token generation
- Sets up row-level security policies
- **Dependencies**: 04_core_tables.sql

### 06_interactions_tables.sql
**Purpose**: Create interaction and component tables (Layers 1 & 2)
- `interactions`: Universal entry point for all customer interactions
- `component_customer_details`: Customer detail components
- `component_equipment_list`: Equipment list components
- `component_hire_details`: Hire-specific details
- `component_offhire_details`: Off-hire/collection details
- `component_breakdown_details`: Equipment breakdown details
- `component_application_details`: Account application details
- `component_quote_totals`: Quote financial totals
- `component_refund_details`: Refund processing details
- Creates triggers for automatic timestamp updates
- **Dependencies**: 05_security_tables.sql

### 07_tasks_tables.sql
**Purpose**: Create task management tables (Layer 3)
- `user_taskboard`: Office tasks for hire controllers, accounts team
- `drivers_taskboard`: Field tasks for drivers (delivery, collection, repair)
- `drivers_task_equipment`: Equipment items assigned to driver tasks
- `task_assignment_history`: Track task assignment changes for audit
- Includes progress tracking columns (booked, driver, QC, WhatsApp status)
- **Dependencies**: 06_interactions_tables.sql

### 08_system_tables.sql
**Purpose**: Create system utilities and reference data
- `reference_prefixes`: Reference number prefixes for each interaction type
- `reference_sequences`: Daily sequence counters for reference numbers
- `system_config`: System-wide configuration settings
- Reference number generation functions (PL250606001 format)
- System configuration management functions
- **Dependencies**: 07_tasks_tables.sql

### 09_indexes.sql
**Purpose**: Create performance optimization indexes
- Core schema indexes (employees, customers, contacts, sites, equipment)
- Security schema indexes (authentication, audit logs, login attempts)
- Interactions schema indexes (interactions and all component tables)
- Tasks schema indexes (user tasks, driver tasks, equipment assignments)
- System schema indexes (reference sequences, configuration)
- Composite indexes for complex queries and analytics
- Partial indexes for active records only
- **Dependencies**: 08_system_tables.sql

### 10_permissions.sql
**Purpose**: Set up role-based permissions and security
- Populates role permissions matrix for all 7 employee roles
- Creates row-level security policies for data access control
- Authentication functions (login, logout, session validation)
- Session context management functions
- Security views for current user context
- Role-specific data access controls
- **Dependencies**: 09_indexes.sql

### 11_sample_data.sql
**Purpose**: Insert sample data for testing and development
- 10 sample employees with different roles (owner, manager, buyer, accounts, hire_control, 4 drivers, mechanic)
- Authentication data for all employees (default password: "password123")
- 5 sample customers (3 companies, 2 individuals) with contacts and sites
- 10 equipment categories with pricing for both company and individual customers
- Sample interactions, user tasks, and driver tasks
- Updates ID sequences to avoid conflicts
- **Dependencies**: 10_permissions.sql

### 12_monitoring_views.sql
**Purpose**: Create monitoring views and reports
- `dashboard_overview`: System overview metrics
- `employee_workload`: Employee task assignments and workload
- `customer_interaction_summary`: Customer activity summary
- `active_user_tasks`: Current user tasks with urgency status
- `active_driver_tasks`: Current driver tasks with schedule status
- `task_progress_summary`: Overall task progress tracking
- Performance analytics views (employee performance, customer service metrics)
- Equipment utilization and operational views
- Business intelligence views for trends and analysis
- **Dependencies**: 11_sample_data.sql

### 13_functions_procedures.sql
**Purpose**: Create business logic functions and procedures
- Customer management functions (create customer with contact, search customers)
- Interaction management functions (create interaction, complete interaction)
- Task management functions (create user/driver tasks, assign drivers, complete tasks)
- Equipment pricing functions (get pricing for customer and duration)
- Reporting functions (workload reports, customer activity reports)
- Maintenance functions (cleanup sessions, archive logs)
- All business logic encapsulated in secure, tested functions
- **Dependencies**: 12_monitoring_views.sql

### 14_final_setup.sql
**Purpose**: Final validation and system readiness
- Creates default system administrator account (SYS001/admin123)
- Sets initial system configuration values
- Validates database structure (table count, function count, view count, index count)
- Validates sample data integrity
- Tests authentication system end-to-end
- Tests core business functions (customer creation, interaction creation, task creation)
- Performance validation for critical queries
- Creates maintenance schedule documentation
- Sets system status to "ready" and displays final summary
- **Dependencies**: 13_functions_procedures.sql

---

## User Management System Explanation

### How It Works Instead of Oracle Users

**Traditional Oracle Approach:**
- Create database users for each person
- Grant permissions directly to database users
- Users connect with their database credentials

**This PostgreSQL Approach:**
- Single database connection user (SYSTEM)
- Employee records serve as "users" in the application
- Authentication handled by application layer using database functions
- Row-level security based on session context

### Authentication Flow

1. **Application Login**: User enters employee_code + password
2. **Database Validation**: `security.authenticate_user()` function validates credentials
3. **Session Creation**: Database returns session token and employee details
4. **Context Setting**: Application calls `security.set_session_context()` with employee_id and role
5. **Access Control**: Row-level security policies enforce data access based on session context

### Role Hierarchy

- **owner**: Full system access, can see all data and perform all operations
- **manager**: Administrative access, can manage employees and view reports
- **buyer**: Equipment and purchasing focus
- **accounts**: Financial operations (statements, refunds, billing)
- **hire_control**: Customer service and task creation
- **driver**: Field operations, can update their assigned tasks
- **mechanic**: Equipment maintenance and repair tasks

### Security Features

- **Password Encryption**: bcrypt hashing with salts
- **Session Management**: Secure tokens with expiration
- **Audit Logging**: Complete trail of all changes
- **Failed Login Protection**: Account lockout after failed attempts
- **Row-Level Security**: Users can only see data they're authorized for
- **Role-Based Permissions**: Granular permissions by employee role

---

## Post-Installation Steps

1. **Change Default Password**: Login as SYS001 and change password immediately
2. **Create Real Employees**: Add your actual team members with appropriate roles
3. **Import Real Data**: Replace sample customers and equipment with real data
4. **Test Functionality**: Verify all business processes work correctly
5. **Setup Backups**: Configure regular database backups
6. **Setup Monitoring**: Implement monitoring for the views created
7. **Application Integration**: Connect your Python Flask application to use the authentication functions
