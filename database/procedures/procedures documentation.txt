# Database Procedures Documentation

## Interaction Reference Number System

Each interaction type has a unique reference number format: **PREFIX + YYMMDD + SEQUENCE**

### Reference Number Format
- **Format:** `[PREFIX][YYMMDD][###]`
- **Example:** `HR250609001` (First hire on June 9th, 2025)
- **Breakdown:**
  - `HR` = Prefix for hire interaction
  - `250609` = Date (June 9th, 2025)
  - `001` = Daily sequence number (resets each day)

### Interaction Type Prefixes

| Interaction Type | Prefix | Description | Example Reference |
|------------------|--------|-------------|-------------------|
| **price_list** | PL | Price List Request | PL250609001 |
| **quote** | QT | Quote Request | QT250609002 |
| **statement** | ST | Account Statement | ST250609003 |
| **refund** | RF | Refund Request | RF250609004 |
| **hire** | HR | Equipment Hire | HR250609005 |
| **off_hire** | OH | Off-Hire/Collection | OH250609006 |
| **breakdown** | BD | Equipment Breakdown | BD250609007 |
| **application** | AP | Account Application | AP250609008 |
| **coring** | CR | Coring Services | CR250609009 |
| **misc_task** | MT | Miscellaneous Task | MT250609010 |

### Reference Number Generation Process
1. **Prefix Lookup:** `system.get_prefix_for_interaction()` retrieves prefix for interaction type
2. **Date Format:** Current date formatted as YYMMDD (e.g., 250609 for June 9, 2025)
3. **Sequence Generation:** `system.get_next_sequence_for_date()` gets next daily sequence number
4. **Reference Assembly:** `system.generate_reference_number()` combines all parts

### Daily Sequence Reset
- Sequence numbers reset to 001 each day
- Multiple interactions of same type on same day get sequential numbers
- System automatically handles concurrent access and prevents duplicates

---

## Customer Management Procedures (`database/procedures/customer_management/`)

### 1. Customer Validation
**Name:** customer_validation.sql  
**Path:** database/procedures/customer_management/customer_validation.sql  
**Purpose:** Customer data validation helpers for input validation across all forms  
- Validates customer data format and business rules  
- Enforces data integrity constraints  
- Provides standardized validation across all customer workflows  
**Inputs:** Customer data fields requiring validation  
**Helper Functions:** core.validate_customer_data  
**Outputs:** Validation status and error messages  

### 2. Customer Lookup
**Name:** customer_lookup.sql  
**Path:** database/procedures/customer_management/customer_lookup.sql  
**Purpose:** Basic customer lookup functions  
**Inputs:** Customer search criteria (ID, name, code)  
**Helper Functions:** core.lookup_customer (functions for customer retrieval)  
**Outputs:** Customer details and related information  

### 3. Contact Lookup by Customer
**Name:** contact_lookup_by_customer.sql  
**Path:** database/procedures/customer_management/contact_lookup_by_customer.sql  
**Purpose:** Retrieve contacts associated with specific customers  
**Inputs:** Customer ID and optional contact filters  
**Helper Functions:** core.get_customer_contacts  
**Outputs:** Contact details for specified customer  

### 4. Customer Search
**Name:** customer_search.sql  
**Path:** database/procedures/customer_management/customer_search.sql  
**Purpose:** Advanced customer search functionality  
**Inputs:** Search terms, filters, pagination parameters  
**Helper Functions:** core.search_customers  
**Outputs:** Paginated customer search results  

### 5. Contact Search
**Name:** contact_search.sql  
**Path:** database/procedures/customer_management/contact_search.sql  
**Purpose:** Search contacts across all customers  
**Inputs:** Search terms, contact filters  
**Helper Functions:** core.search_contacts  
**Outputs:** Contact search results with customer references  

### 6. Contact Duplicate Detection
**Name:** contact_duplicate_detection.sql  
**Path:** database/procedures/customer_management/contact_duplicate_detection.sql  
**Purpose:** Detect and prevent duplicate contact entries  
**Inputs:** Contact details (email, phone, name)  
**Helper Functions:** core.detect_duplicate_contacts  
**Outputs:** Duplicate detection status and potential matches  

### 7. Contact Create
**Name:** contact_create.sql  
**Path:** database/procedures/customer_management/contact_create.sql  
**Purpose:** Add new contact to existing customer  
- Creates new contact record with full validation  
- Enforces unique email addresses and single primary/billing contacts  
- Provides comprehensive audit logging  
- Handles edge cases for contact role assignments  
**Inputs:** Customer ID, contact details (name, email, phone, job title, department)  
**Helper Functions:** 
- `security.authenticate_user()` - Authentication and authorization
- `core.validate_contact_data()` - Contact data validation
- `core.check_duplicate_contacts()` - Duplicate contact detection
- `security.audit_log()` - Audit logging for contact creation
**Outputs:** Success status, contact ID, validation errors  

### 8. Customer Create with Contact
**Name:** customer_create_with_contact.sql  
**Path:** database/procedures/customer_management/customer_create_with_contact.sql  
**Purpose:** Create new customer with primary contact simultaneously  
**Inputs:** Customer details, primary contact details, site information  
**Helper Functions:** core.create_customer_with_contact  
**Outputs:** Customer ID, contact ID, site ID, success status  

### 9. Customer Create
**Name:** customer_create.sql  
**Path:** database/procedures/customer_management/customer_create.sql  
**Purpose:** Create new customer with primary contact and site  
- Creates complete customer setup in single transaction  
- Validates all customer data and prevents duplicates  
- Creates customer record with auto-generated customer code  
- Creates primary contact with full validation  
- Creates default delivery site with address information  
- Provides comprehensive audit trail and error handling  
**Inputs:** Customer name, contact details, optional customer details, site details  
**Helper Functions:** 
- `security.authenticate_user()` - Authentication and authorization
- `system.generate_reference_number()` - Generate customer codes
- `core.validate_customer_data()` - Customer data validation
- `security.audit_log()` - Audit logging for customer creation
**Outputs:** Customer ID, contact ID, site ID, reference number, validation errors  

### 10. Site Management
**Name:** site_management.sql  
**Path:** database/procedures/customer_management/site_management.sql  
**Purpose:** Manage customer site information  
**Inputs:** Customer ID, site details, address information  
**Helper Functions:** core.manage_customer_sites  
**Outputs:** Site ID, address validation, site management status  

### 11. Contact Update
**Name:** contact_update.sql  
**Path:** database/procedures/customer_management/contact_update.sql  
**Purpose:** Update existing contact information  
**Inputs:** Contact ID, updated contact details  
**Helper Functions:** core.update_contact  
**Outputs:** Update status, validation errors  

### 12. Customer Update
**Name:** customer_update.sql  
**Path:** database/procedures/customer_management/customer_update.sql  
**Purpose:** Update customer information  
**Inputs:** Customer ID, updated customer details  
**Helper Functions:** core.update_customer  
**Outputs:** Update status, validation results  

### 13. Customer Status Update
**Name:** customer_status_update.sql  
**Path:** database/procedures/customer_management/customer_status_update.sql  
**Purpose:** Update customer account status  
**Inputs:** Customer ID, status change, reason  
**Helper Functions:** core.update_customer_status  
**Outputs:** Status change confirmation, audit trail  

## Interactions Procedures (`database/procedures/interactions/`)

### 14. Process Price List Request
**Name:** process_price_list_request.sql  
**Path:** database/procedures/interactions/process_price_list_request.sql  
**Purpose:** Process price list requests from customers  
**Inputs:** Customer ID, contact ID, equipment list, contact method  
**Helper Functions:** interactions.process_price_list_request  
**Outputs:** Interaction ID, reference number, price list data  

### 15. Get Price List Data
**Name:** get_price_list_data.sql  
**Path:** database/procedures/interactions/get_price_list_data.sql  
**Purpose:** Get equipment pricing data for price list generation  
**Inputs:** Customer ID, equipment filters, pricing parameters  
**Helper Functions:** interactions.get_price_list_data  
**Outputs:** Equipment pricing, deposit amounts, customer-specific rates  

### 16. Process Statement Request
**Name:** process_statement_request.sql  
**Path:** database/procedures/interactions/process_statement_request.sql  
**Purpose:** Process account statement requests  
**Inputs:** Customer ID, contact ID, contact method, notes, employee ID  
**Helper Functions:** interactions.process_statement_request  
**Outputs:** Interaction ID, reference number, task ID, assigned employee  

### 17. Create Application
**Name:** create_application.sql  
**Path:** database/procedures/interactions/create_application.sql  
**Purpose:** Process new customer applications (individual or company)  
- Creates application interaction using generic customer records  
- Records applicant details for verification workflow  
- Creates hire controller task for application processing  
- Generates formal application reference number  
- Handles both individual and company application types  
- Initiates verification and credit approval workflow  
**Inputs:** Customer details, application type, contact information  
**Helper Functions:** 
- `security.authenticate_user()` - Authentication and authorization
- `system.generate_reference_number()` - Generate unique reference numbers
- `tasks.create_user_task()` - Create hire controller verification task
**Outputs:** Application ID, reference number, verification tasks  

### 18. Update Application Status
**Name:** update_application_status.sql  
**Path:** database/procedures/interactions/update_application_status.sql  
**Purpose:** Update application verification status and add notes  
**Inputs:** Application ID, status update, verification notes  
**Helper Functions:** interactions.update_application_status  
**Outputs:** Updated status, verification audit trail  

### 19. Create Hire
**Name:** create_hire.sql  
**Path:** database/procedures/interactions/create_hire.sql  
**Purpose:** Process equipment hire requests from customers  
- Creates hire interaction record with customer and contact details  
- Records equipment list and hire start date information  
- Creates driver delivery task with scheduling details  
- Simple workflow focused on hire initiation only (no end dates)  
- Provides standardized hire processing with minimal complexity  
**Inputs:** Customer details, contact details, equipment list, hire start date, delivery date, site/address information, notes  
**Helper Functions:** 
- `security.authenticate_user()` - Authentication and authorization
- `system.generate_reference_number()` - Generate unique reference numbers
- `tasks.create_driver_task()` - Create standardized driver delivery task
**Outputs:** Interaction ID, reference number, driver task ID  

### 20. Create Off Hire
**Name:** create_off_hire.sql  
**Path:** database/procedures/interactions/create_off_hire.sql  
**Purpose:** Process equipment off-hire/collection requests  
- Creates off-hire interaction record with customer and contact details  
- Records equipment list and hire end date information  
- Creates driver collection task with scheduling details  
- Simple workflow focused on hire termination only  
- Provides standardized collection processing with minimal complexity  
**Inputs:** Customer details, contact details, equipment list, hire end date, collection date, site/address information, notes  
**Helper Functions:** 
- `security.authenticate_user()` - Authentication and authorization
- `system.generate_reference_number()` - Generate unique reference numbers
- `tasks.create_driver_task()` - Create standardized driver collection task
**Outputs:** Interaction ID, reference number, driver task ID  

### 21. Create Breakdown
**Name:** create_breakdown.sql  
**Path:** database/procedures/interactions/create_breakdown.sql  
**Purpose:** Process equipment breakdown reports from customers  
- Creates breakdown interaction with urgency-based priority handling  
- Creates urgent driver repair task with immediate assignment for critical breakdowns  
- Handles equipment swap-out and replacement workflows  
- Assigns both broken and replacement equipment to driver tasks  
- Provides emergency response timeframes (30 minutes to 1 hour)  
- Includes comprehensive audit logging for breakdown tracking  
**Inputs:** Customer ID, equipment details, breakdown description, urgency  
**Helper Functions:** 
- `security.authenticate_user()` - Authentication and authorization
- `system.generate_reference_number()` - Generate unique reference numbers
- `tasks.find_available_driver()` - Find best available driver for emergency response
- `tasks.create_driver_task()` - Create urgent repair task with priority handling
- `core.search_equipment_for_breakdown()` - Validate equipment eligibility for breakdown
**Outputs:** Breakdown ID, reference number, emergency repair tasks  

### 22. Process Quote Request
**Name:** process_quote_request.sql  
**Path:** database/procedures/interactions/process_quote_request.sql  
**Purpose:** Process quote requests for equipment hire  
**Inputs:** Customer ID, equipment requirements, quote parameters  
**Helper Functions:** interactions.process_quote_request  
**Outputs:** Quote ID, reference number, formal pricing document  

### 23. Process Refund Request
**Name:** process_refund_request.sql  
**Path:** database/procedures/interactions/process_refund_request.sql  
**Purpose:** Process refund requests from customers  
**Inputs:** Customer ID, refund details, refund reason  
**Helper Functions:** interactions.process_refund_request  
**Outputs:** Refund ID, reference number, accounts processing tasks  

## Helper Procedures (`database/procedures/helpers/`)

### 24. Get Equipment Details
**Name:** get_equipment_details.sql  
**Path:** database/procedures/helpers/get_equipment_details.sql  
**Purpose:** Retrieve detailed equipment information  
**Inputs:** Equipment ID, detail level requirements  
**Helper Functions:** core.get_equipment_details  
**Outputs:** Equipment specifications, pricing, availability  

### 25. Get Customer Sites
**Name:** get_customer_sites.sql  
**Path:** database/procedures/helpers/get_customer_sites.sql  
**Purpose:** Retrieve customer site information  
**Inputs:** Customer ID, site filters  
**Helper Functions:** core.get_customer_sites  
**Outputs:** Site details, addresses, contact information  

### 26. Get Customer Equipment History
**Name:** get_customer_equipment_history.sql  
**Path:** database/procedures/helpers/get_customer_equipment_history.sql  
**Purpose:** Get equipment history for customer showing hire/delivery status  
- Provides comprehensive equipment tracking across all interactions  
- Shows hire counts, last hire dates, and current status for each equipment type  
- Supports filtering by site, equipment type, and date range  
- Tracks equipment lifecycle from hire to return  
- Essential for breakdown workflow to identify currently hired equipment  
**Inputs:** Customer ID, site ID, equipment search, date range, active hires filter  
**Helper Functions:** core.get_customer_equipment_history  
**Outputs:** Equipment history, hire counts, last hire date, current status  

### 27. Get Customer Equipment by Site
**Name:** get_customer_equipment_by_site.sql  
**Path:** database/procedures/helpers/get_customer_equipment_by_site.sql  
**Purpose:** Combined view of equipment at each customer site  
- Groups equipment by customer site for site-based management  
- Shows current quantities and status at each location  
- Provides site contact information for coordination  
- Essential for breakdown workflow and site-specific operations  
- Supports search filtering and active equipment tracking  
**Inputs:** Customer ID, search term, days back, active only filter  
**Helper Functions:** core.get_customer_equipment_by_site  
**Outputs:** Site-grouped equipment, quantities, status, contact details  

### 28. Search Equipment for Breakdown
**Name:** search_equipment_for_breakdown.sql  
**Path:** database/procedures/helpers/search_equipment_for_breakdown.sql  
**Purpose:** Primary search function for breakdown workflow  
- Specialized search for equipment eligible for breakdown reporting  
- Returns formatted selectable IDs for frontend dropdown integration  
- Filters equipment by status (shows only hired equipment that can break down)  
- Provides breakdown eligibility flags and site contact information  
- Optimized for emergency breakdown response scenarios  
**Inputs:** Customer ID, search term, site filter, equipment filter  
**Helper Functions:** core.search_equipment_for_breakdown  
**Outputs:** Selectable equipment list, breakdown eligibility, site contacts  

### 29. Calculate Hire Costs
**Name:** calculate_hire_costs.sql  
**Path:** database/procedures/helpers/calculate_hire_costs.sql  
**Purpose:** Calculate hire costs for equipment lists based on customer type  
- Calculates detailed cost breakdown for equipment hire quotes  
- Applies customer-type specific pricing (individual vs company rates)  
- Handles multiple hire periods (daily, weekly, monthly)  
- Calculates deposit amounts and total costs  
- Optimizes pricing period selection for best customer value  
- Essential for quote generation and hire processing workflows  
**Inputs:** Customer ID, equipment list with quantities and duration  
**Helper Functions:** 
- `core.get_customer_pricing_type()` - Determine customer pricing tier
- `core.get_equipment_pricing()` - Retrieve current equipment rates
- `core.calculate_period_costs()` - Calculate costs for different periods
**Outputs:** Detailed cost breakdown, rates, deposits, totals  

### 30. Check Customer Credit
**Name:** check_customer_credit.sql  
**Path:** database/procedures/helpers/check_customer_credit.sql  
**Purpose:** Verify customer credit status and limits  
**Inputs:** Customer ID, proposed hire amount  
**Helper Functions:** core.check_customer_credit  
**Outputs:** Credit approval status, available credit, payment terms  

### 31. Check Equipment Availability
**Name:** check_equipment_availability.sql  
**Path:** database/procedures/helpers/check_equipment_availability.sql  
**Purpose:** Check equipment availability for hire periods  
**Inputs:** Equipment ID, hire period, quantity required  
**Helper Functions:** core.check_equipment_availability  
**Outputs:** Availability status, alternative options, delivery dates  

### 32. Get Hire Totals
**Name:** get_hire_totals.sql  
**Path:** database/procedures/helpers/get_hire_totals.sql  
**Purpose:** Calculate total hire costs and summaries  
**Inputs:** Hire ID or equipment list  
**Helper Functions:** core.get_hire_totals  
**Outputs:** Total costs, deposit requirements, payment schedules  

## Build Scripts

### Customer Management Build
**Name:** build_customer_procedures.sql  
**Path:** database/procedures/customer_management/build_customer_procedures.sql  
**Purpose:** Load all customer management procedures in dependency order  
**Dependencies:** All customer management procedure files  
**Loads:** Validation helpers, lookup functions, search functions, creation functions, update functions  

### Interactions Build
**Name:** build_interactions_procedures.sql  
**Path:** database/procedures/interactions/build_interactions_procedures.sql  
**Purpose:** Load all interaction procedures in dependency order  
**Dependencies:** All interaction procedure files  
**Loads:** Basic interactions, application functions, equipment interactions, financial interactions  

### Helpers Build
**Name:** build_helpers_procedures.sql  
**Path:** database/procedures/helpers/build_helpers_procedures.sql  
**Purpose:** Load all helper procedures in dependency order  
**Dependencies:** All helper procedure files  
**Loads:** Equipment & site helpers, hire calculation helpers  

### Master Build
**Name:** build_all_procedures.sql  
**Path:** database/procedures/_build/build_all_procedures.sql  
**Purpose:** Master script to load all procedures in dependency order  
**Dependencies:** All procedure files  
**Loads:** Complete database procedure system in correct order

## Core Helper Functions (Base of Pyramid) - Detailed Documentation

These are the fundamental building blocks used by multiple procedures to reduce redundant code:

### Authentication & Authorization Helpers

#### `security.authenticate_user(username, password)`
**Purpose:** Validates user credentials and creates session tokens  
**Process:**
1. Looks up employee by username in `security.employee_auth`
2. Verifies account is not locked due to failed attempts
3. Validates password using bcrypt hash comparison
4. Generates new session token with expiration
5. Updates last login timestamp and resets failed attempts
6. Logs login attempt for security monitoring  
**Inputs:** Username (string), Password (string)  
**Outputs:** Success status, employee_id, employee_name, role, session_token, message  
**Used By:** All procedures requiring authentication  

#### `security.set_session_context(employee_id, role)`
**Purpose:** Sets PostgreSQL session variables for row-level security  
**Process:**
1. Sets `app.current_employee_id` session variable
2. Sets `app.current_employee_role` session variable
3. Enables row-level security policies based on these values  
**Inputs:** Employee ID (integer), Employee role (string)  
**Outputs:** None (void function)  
**Used By:** All authenticated procedures for data access control  

#### `security.validate_session(session_token)`
**Purpose:** Validates existing session tokens  
**Process:**
1. Looks up session token in `security.employee_auth`
2. Checks token has not expired
3. Verifies associated employee is still active
4. Returns employee details if valid  
**Inputs:** Session token (string)  
**Outputs:** Employee record or null if invalid  
**Used By:** Procedures accepting session tokens instead of employee_id  

### System Utilities

#### `system.generate_reference_number(interaction_type)`
**Purpose:** Generates unique reference numbers in format PREFIX+YYMMDD+SEQUENCE  
**Process:**
1. Calls `system.get_prefix_for_interaction()` to get prefix
2. Formats current date as YYMMDD
3. Calls `system.get_next_sequence_for_date()` for sequence number
4. Combines into final reference (e.g., HR250609001)  
**Inputs:** Interaction type (string)  
**Outputs:** Unique reference number (string)  
**Used By:** All interaction creation procedures  

#### `system.get_prefix_for_interaction(interaction_type)`
**Purpose:** Retrieves reference prefix for interaction type  
**Process:**
1. Queries `system.reference_prefixes` table
2. Returns active prefix for given interaction type
3. Raises exception if no active prefix found  
**Inputs:** Interaction type (string)  
**Outputs:** Prefix (string) - HR, PL, QT, etc.  
**Used By:** `system.generate_reference_number()`  

#### `system.get_next_sequence_for_date(prefix, date_part)`
**Purpose:** Gets next sequence number for specific date  
**Process:**
1. Uses UPSERT on `system.reference_sequences` table
2. Increments sequence counter for prefix+date combination
3. Handles concurrent access with database locks
4. Returns current sequence number  
**Inputs:** Prefix (string), Date part YYMMDD (string)  
**Outputs:** Next sequence number (integer)  
**Used By:** `system.generate_reference_number()`  

### Task Management Helpers

#### `tasks.create_driver_task(interaction_id, task_type, priority, ...)`
**Purpose:** Creates standardized driver tasks with proper formatting  
**Process:**
1. Validates interaction exists and is active
2. Builds standardized task title and description
3. Sets priority-based scheduling (urgent tasks get immediate dates)
4. Assigns driver if provided, otherwise leaves for assignment
5. Creates progress tracking columns (booked, driver, QC, whatsapp)
6. Inserts into `tasks.drivers_taskboard`  
**Inputs:** Interaction ID, task type, priority, customer details, scheduling info  
**Outputs:** Task ID, assigned driver name, task status  
**Used By:** All interaction procedures creating driver tasks  

#### `tasks.create_user_task(interaction_id, assigned_to, task_type, title, description)`
**Purpose:** Creates office tasks for hire controllers and accounts team  
**Process:**
1. Validates interaction and employee exist
2. Sets due date based on task type and priority
3. Creates task with appropriate status (new/assigned)
4. Links to interaction for context
5. Inserts into `tasks.user_taskboard`  
**Inputs:** Interaction ID, assignee, task type, title, description  
**Outputs:** Task ID, assigned employee name, due date  
**Used By:** Application, statement, refund procedures  

#### `tasks.find_available_driver(required_date, priority)`
**Purpose:** Finds best available driver based on workload and priority  
**Process:**
1. Queries all active drivers
2. Counts existing tasks for required date
3. Calculates availability score (0-100)
4. Boosts score for high priority tasks
5. Returns drivers ordered by availability  
**Inputs:** Required date, task priority  
**Outputs:** Driver ID, name, current workload, availability score  
**Used By:** Hire, off-hire, breakdown procedures  

#### `tasks.assign_driver_to_task(task_id, driver_id, assigned_by)`
**Purpose:** Assigns drivers to existing tasks  
**Process:**
1. Validates task exists and is assignable
2. Uses `find_available_driver()` if no driver specified
3. Updates task assignment and status
4. Logs assignment in `task_assignment_history`
5. Notifies driver if notification system enabled  
**Inputs:** Task ID, optional driver ID, assigning employee  
**Outputs:** Success status, assigned driver details  
**Used By:** Task management workflows  

### Data Validation Helpers

#### `core.validate_customer_data(customer_data)`
**Purpose:** Customer data validation with business rules  
**Process:**
1. Validates required fields (name, contact info)
2. Checks field lengths and formats
3. Validates email format with regex
4. Checks phone number format
5. Validates business registration numbers
6. Returns array of validation errors  
**Inputs:** Customer data object/parameters  
**Outputs:** Validation errors array  
**Used By:** Customer creation and update procedures  

#### `core.validate_contact_data(contact_data)`
**Purpose:** Contact data validation and format checking  
**Process:**
1. Validates required fields (first name, last name, email)
2. Checks email format and uniqueness
3. Validates phone number formats
4. Checks job title and department lengths
5. Validates contact role assignments (primary/billing)  
**Inputs:** Contact data object/parameters  
**Outputs:** Validation errors array  
**Used By:** Contact creation and update procedures  

#### `core.check_duplicate_contacts(email, phone, customer_id)`
**Purpose:** Duplicate contact detection across system  
**Process:**
1. Searches for existing contacts with same email
2. Checks phone number duplicates (optional)
3. Excludes contacts from same customer if updating
4. Returns potential duplicate matches
5. Provides similarity scoring for fuzzy matches  
**Inputs:** Email, phone, optional customer ID to exclude  
**Outputs:** Duplicate contacts found, similarity scores  
**Used By:** Contact creation procedures  

### Equipment & Pricing Helpers

#### `core.get_customer_pricing_type(customer_id)`
**Purpose:** Determines pricing tier (individual vs company)  
**Process:**
1. Looks up customer record
2. Checks `is_company` flag
3. May check additional criteria (credit limit, volume)
4. Returns pricing tier for rate calculations  
**Inputs:** Customer ID  
**Outputs:** Pricing type ('individual' or 'company')  
**Used By:** Pricing calculation procedures  

#### `core.get_equipment_pricing(equipment_id, customer_type, effective_date)`
**Purpose:** Retrieves current equipment rates  
**Process:**
1. Queries `core.equipment_pricing` table
2. Filters by customer type and active status
3. Checks effective date ranges
4. Returns daily, weekly, monthly rates and deposits
5. Handles special pricing rules if configured  
**Inputs:** Equipment ID, customer type, effective date  
**Outputs:** Daily rate, weekly rate, monthly rate, deposit amount  
**Used By:** Cost calculation procedures  

#### `core.calculate_period_costs(daily_rate, weekly_rate, monthly_rate, duration, period_type)`
**Purpose:** Calculates costs for different hire periods  
**Process:**
1. Validates input parameters
2. Calculates cost for requested period type
3. Compares daily vs weekly vs monthly rates
4. Returns optimal pricing period for customer
5. Handles fractional periods and minimums  
**Inputs:** All rates, hire duration, period type  
**Outputs:** Calculated cost, optimal period, savings amount  
**Used By:** Quote and hire cost calculation procedures  

#### `core.check_equipment_availability(equipment_id, start_date, end_date, quantity)`
**Purpose:** Checks equipment availability for hire periods  
**Process:**
1. Queries existing hires for equipment and date range
2. Calculates available quantity
3. Checks maintenance schedules
4. Suggests alternative dates if unavailable
5. Returns availability status and alternatives  
**Inputs:** Equipment ID, date range, required quantity  
**Outputs:** Available quantity, alternative suggestions, earliest availability  
**Used By:** Hire and quote procedures  

### Audit & Logging Helpers

#### `security.audit_log(employee_id, action, table_name, record_id, new_values, ip_address)`
**Purpose:** Comprehensive audit logging for all changes  
**Process:**
1. Validates employee exists and is active
2. Captures before/after values for updates
3. Records IP address and timestamp
4. Stores action type and affected records
5. Inserts into `security.audit_log` table  
**Inputs:** Employee, action, table, record ID, data changes, IP  
**Outputs:** Audit log entry ID  
**Used By:** All procedures making data changes  

#### `security.log_interaction(interaction_id, action, details)`
**Purpose:** Logs interaction creation and updates  
**Process:**
1. Records interaction lifecycle events
2. Captures status changes and assignments
3. Links to audit trail for compliance
4. Provides interaction history tracking  
**Inputs:** Interaction ID, action type, detail object  
**Outputs:** Log entry confirmation  
**Used By:** All interaction procedures  

### Credit & Financial Helpers

#### `core.check_customer_credit(customer_id, required_amount)`
**Purpose:** Validates customer credit availability  
**Process:**
1. Retrieves customer credit limit
2. Calculates current credit usage from:
   - Outstanding hire charges
   - Pending invoices  
   - Unreturned equipment deposits
   - Other account balances
3. Determines available credit
4. Returns approval/denial with details  
**Inputs:** Customer ID, required credit amount  
**Outputs:** Credit available flag, limits, usage, shortfall  
**Used By:** Hire and quote procedures  

#### `core.get_customer_payment_terms(customer_id)`
**Purpose:** Retrieves customer-specific payment terms  
**Process:**
1. Looks up customer payment terms
2. Applies default terms if none specified
3. Checks for special arrangements
4. Returns payment schedule requirements  
**Inputs:** Customer ID  
**Outputs:** Payment terms, due dates, special conditions  
**Used By:** Invoicing and credit procedures  

This pyramid structure ensures maximum code reuse and consistency across all business procedures while providing comprehensive validation, logging, and business rule enforcement.