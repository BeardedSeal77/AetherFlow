# Hire Process Documentation

## Overview

Simple hire workflow where users build hire requests through searchable selection components.

## User Interface Flow

### Step 1: Customer Selection
- **User Action:** Selects customer from searchable list box
- **Required Procedure:** `core.search_customers(search_term)`
- **Returns:** Customer ID, name, code for selection

### Step 2: Contact Selection  
- **User Action:** Selects contact from searchable list box (filtered by selected customer)
- **Required Procedure:** `core.get_contacts_by_customer(customer_id)`
- **Returns:** Contact ID, name, job title, phone, email

### Step 3: Site Selection
- **User Action:** Selects site from searchable list box (filtered by selected customer)
- **Required Procedure:** `core.get_sites_by_customer(customer_id)`
- **Returns:** Site ID, name, address, delivery instructions

### Step 4: Date Input
- **User Action:** Inputs hire start date and delivery date
- **Backend Process:** Simple date validation

### Step 5: Equipment Selection
- **User Action:** Selects equipment from searchable list box and chooses quantity
- **Required Procedure:** `core.get_equipment_list()` (basic list, no availability checking)
- **Returns:** Equipment ID, name, description, daily rate

### Step 6: Accessories Selection
- **User Action:** Selects accessories from searchable list box (filtered by selected equipment)
- **Backend Process:** 
  - Load accessories for selected equipment
  - Default accessories already checked/enabled
  - User can adjust quantities or add optional accessories
- **Required Procedure:** `core.get_equipment_accessories(equipment_category_id)`
- **Returns:** Accessory ID, name, type (default/optional), default quantity

### Step 7: Notes (Optional)
- **User Action:** Adds notes if needed
- **Backend Process:** Simple text field

### Step 8: Submission
- **User Action:** Submits hire request
- **Backend Process:** Calls `interactions.create_hire()` 
- **Result:** Creates interaction and driver task

## Required Database Procedures

### 1. `core.search_customers(search_term)`
**Purpose:** Get searchable customer list  
**Returns:** Customer ID, name, code

### 2. `core.get_contacts_by_customer(customer_id)`
**Purpose:** Get contacts for selected customer  
**Returns:** Contact ID, name, job title, phone, email

### 3. `core.get_sites_by_customer(customer_id)`
**Purpose:** Get sites for selected customer  
**Returns:** Site ID, name, address, delivery instructions

### 4. `core.get_equipment_list()` **[NEW - SIMPLE VERSION]**
**Purpose:** Get basic equipment list (no availability checking)  
**Returns:** Equipment ID, name, description, daily rate

### 5. `core.get_equipment_accessories(equipment_category_id)`
**Purpose:** Get accessories for selected equipment  
**Returns:** Accessory ID, name, type (default/optional), default quantity

### 6. `interactions.create_hire()`
**Purpose:** Create hire interaction and driver task  
**Process:**
- Creates interaction record
- Adds equipment to `component_equipment_list`
- Adds accessories to `component_accessories_list`
- Creates driver delivery task

## Data Flow

```
User Input → Python Layer → Database Procedures → Result

Customer Selection → core.search_customers() → Customer ID
Contact Selection → core.get_contacts_by_customer() → Contact ID  
Site Selection → core.get_sites_by_customer() → Site ID
Equipment Selection → core.get_equipment_list() → Equipment ID + Quantity
Accessories Selection → core.get_equipment_accessories() → Accessory IDs + Quantities
Submit → interactions.create_hire() → Interaction + Driver Task
```

## Database Tables Used

- `core.customers` - Customer master data
- `core.contacts` - Customer contacts  
- `core.sites` - Customer sites
- `core.equipment_categories` - Equipment list
- `core.equipment_accessories` - Equipment accessories
- `interactions.interactions` - Main interaction record
- `interactions.component_equipment_list` - Selected equipment
- `interactions.component_accessories_list` - Selected accessories  
- `tasks.drivers_taskboard` - Driver delivery task

## Python Layer Structure

```python
# Collect user selections
hire_data = {
    "customer_id": selected_customer_id,
    "contact_id": selected_contact_id,
    "site_id": selected_site_id,
    "hire_start_date": start_date,
    "delivery_date": delivery_date,
    "equipment_list": [
        {"equipment_category_id": 1, "quantity": 2},
        {"equipment_category_id": 3, "quantity": 1}
    ],
    "accessories_list": [
        {"accessory_id": 101, "quantity": 1},
        {"accessory_id": 102, "quantity": 3}
    ],
    "notes": "Special delivery instructions"
}

# Call hire creation procedure
result = interactions.create_hire(hire_data)
```

## Result

- Creates hire interaction record
- Creates driver delivery task
- Returns reference number and task ID

Simple, straightforward hire process with searchable selections and basic equipment/accessories handling.